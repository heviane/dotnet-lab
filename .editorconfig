# EditorConfig é incrível para manter estilos de codificação consistentes
# para várias pessoas trabalhando no mesmo projeto em vários editores e IDEs.
# editorconfig.org

# Indica que este é o arquivo raiz e o EditorConfig não deve procurar por outros arquivos .editorconfig em diretórios pais.
root = true

# --- Configurações Gerais para Todos os Tipos de Arquivo ---

[*]
# Estilo de indentação: usar espaços em vez de tabs.
indent_style = space

# Tamanho da indentação: 4 espaços. Padrão para C#.
indent_size = 4

# Codificação de caracteres: UTF-8 para garantir compatibilidade.
charset = utf-8

# Final de linha: LF (Unix/macOS) para consistência entre plataformas.
end_of_line = lf

# Remove espaços em branco no final das linhas.
trim_trailing_whitespace = true

# Garante que o arquivo termine com uma linha em branco. Bom para o Git.
insert_final_newline = true


# --- Configurações Específicas para Arquivos C# (.cs) ---

[*.cs]
# Organização das diretivas 'using'
csharp_using_directive_placement = outside_namespace
dotnet_sort_system_directives_first = true

# Preferências de uso da palavra-chave 'var'
# Não usar 'var' para tipos primitivos (int, string, bool, etc.)
csharp_style_var_for_built_in_types = false:suggestion
# Usar 'var' quando o tipo for óbvio no lado direito da atribuição
csharp_style_var_when_type_is_apparent = true:suggestion
# Usar 'var' em outras situações
csharp_style_var_elsewhere = true:suggestion

# Estilo de chaves '{ }' (Allman style)
# Colocar chaves em uma nova linha para blocos de código
csharp_new_line_before_open_brace = all

# Exigir chaves para todas as estruturas de controle (if, for, while, etc.)
csharp_prefer_braces = true:suggestion

# Espaçamento
csharp_space_after_cast = true
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after

# Modificadores de código
# Exigir que modificadores de acesso (public, private, etc.) sejam especificados
dotnet_style_require_accessibility_modifiers = always:suggestion

# Preferir 'this.' para acessar membros de instância
dotnet_style_qualification_for_field = true:suggestion
dotnet_style_qualification_for_property = true:suggestion
dotnet_style_qualification_for_method = true:suggestion

# --- Convenções de Nomenclatura ---

# Regra: Membros públicos devem usar PascalCase
dotnet_naming_rule.public_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_members_should_be_pascal_case.symbols  = public_symbols
dotnet_naming_rule.public_members_should_be_pascal_case.style    = pascal_case_style

dotnet_naming_symbols.public_symbols.applicable_kinds = class, struct, interface, enum, property, method, field, event, delegate
dotnet_naming_symbols.public_symbols.accessibility    = public, internal, protected, protected_internal

dotnet_naming_style.pascal_case_style.capitalization = pascal_case
